/*
 * VBDLEDData.h
 *
 *  Created on: Jan 29, 2022
 *      Author: VBDUnit
 */

#ifndef SRC_VBDLEDDATA_H_
#define SRC_VBDLEDDATA_H_

//\#define INVERTORS

#define LEDS_PER_STRIPE 144
#define STRIPE_COUNT 20
#define LED_COUNT (LEDS_PER_STRIPE * STRIPE_COUNT)
#define BYTES_PER_LED 3
#define BYTES_PER_PACK (STRIPE_COUNT * BYTES_PER_LED)

static uint8_t ledData[LED_COUNT * BYTES_PER_LED];


static uint8_t* ledDataPtr = 0;
static uint8_t* ledDataEnd = 0;

static volatile int testVariable = 15;

static volatile int ledNoUpdateCounter = 0;


static void LED_Init(void)
{
	ledDataPtr = ledData;
	ledDataEnd = ledDataPtr + LED_COUNT * BYTES_PER_LED;
}

static void LED_WriteBuffer(uint8_t* sourcePtr, uint16_t sourceByteCount, int32_t* bytesCopyed, int32_t* bufferIsFilled)
{
	int32_t bytesToCopy = sourceByteCount;
	if (ledDataPtr + bytesToCopy >= ledDataEnd)
		bytesToCopy = ledDataEnd - ledDataPtr;

	memcpy(ledDataPtr, sourcePtr, bytesToCopy);
	ledDataPtr += bytesToCopy;

	*bufferIsFilled = ledDataPtr == ledDataEnd ? 1 : 0;
	*bytesCopyed = bytesToCopy;
}


static inline void Wait50us()
{

}
static void LED_DisplayData(void) __attribute__((noinline));
static void LED_DisplayData(void)

	uint32_t VALUE_C0, VALUE_C1, VALUE_C2, VALUE_C3, VALUE_C4, VALUE_C5, VALUE_C6, VALUE_C7, VALUE_C8, VALUE_C9, VALUE_C10, VALUE_C11, VALUE_C12, VALUE_C13, VALUE_C14, VALUE_C15, VALUE_C16, VALUE_C17, VALUE_C18, VALUE_C19, VALUE_C20, VALUE_C21, VALUE_C22, VALUE_C23, VALUE_C24, VALUE_C25, VALUE_C26, VALUE_C27, VALUE_C28, VALUE_C29, VALUE_C30, VALUE_C31, VALUE_C32, VALUE_C33, VALUE_C34, VALUE_C35, VALUE_C36, VALUE_C37, VALUE_C38, VALUE_C39, VALUE_C40, VALUE_C41, VALUE_C42, VALUE_C43, VALUE_C44, VALUE_C45, VALUE_C46, VALUE_C47, VALUE_C48, VALUE_C49, VALUE_C50, VALUE_C51, VALUE_C52, VALUE_C53, VALUE_C54, VALUE_C55, VALUE_C56, VALUE_C57, VALUE_C58, VALUE_C59, VALUE_C60, VALUE_C61, VALUE_C62, VALUE_C63, VALUE_C64, VALUE_C65, VALUE_C66, VALUE_C67, VALUE_C68, VALUE_C69, VALUE_C70, VALUE_C71;
	uint32_t VALUE_B0, VALUE_B1, VALUE_B2, VALUE_B3, VALUE_B4, VALUE_B5, VALUE_B6, VALUE_B7, VALUE_B8, VALUE_B9, VALUE_B10, VALUE_B11, VALUE_B12, VALUE_B13, VALUE_B14, VALUE_B15, VALUE_B16, VALUE_B17, VALUE_B18, VALUE_B19, VALUE_B20, VALUE_B21, VALUE_B22, VALUE_B23, VALUE_B24, VALUE_B25, VALUE_B26, VALUE_B27, VALUE_B28, VALUE_B29, VALUE_B30, VALUE_B31, VALUE_B32, VALUE_B33, VALUE_B34, VALUE_B35, VALUE_B36, VALUE_B37, VALUE_B38, VALUE_B39, VALUE_B40, VALUE_B41, VALUE_B42, VALUE_B43, VALUE_B44, VALUE_B45, VALUE_B46, VALUE_B47, VALUE_B48, VALUE_B49, VALUE_B50, VALUE_B51, VALUE_B52, VALUE_B53, VALUE_B54, VALUE_B55, VALUE_B56, VALUE_B57, VALUE_B58, VALUE_B59, VALUE_B60, VALUE_B61, VALUE_B62, VALUE_B63, VALUE_B64, VALUE_B65, VALUE_B66, VALUE_B67, VALUE_B68, VALUE_B69, VALUE_B70, VALUE_B71;
	VALUE_C0=VALUE_B0=65535;VALUE_C2=VALUE_B2=0;VALUE_C3=VALUE_B3=65535;VALUE_C5=VALUE_B5=0;VALUE_C6=VALUE_B6=65535;VALUE_C8=VALUE_B8=0;VALUE_C9=VALUE_B9=65535;VALUE_C11=VALUE_B11=0;VALUE_C12=VALUE_B12=65535;VALUE_C14=VALUE_B14=0;VALUE_C15=VALUE_B15=65535;VALUE_C17=VALUE_B17=0;VALUE_C18=VALUE_B18=65535;VALUE_C20=VALUE_B20=0;VALUE_C21=VALUE_B21=65535;VALUE_C23=VALUE_B23=0;VALUE_C24=VALUE_B24=65535;VALUE_C26=VALUE_B26=0;VALUE_C27=VALUE_B27=65535;VALUE_C29=VALUE_B29=0;VALUE_C30=VALUE_B30=65535;VALUE_C32=VALUE_B32=0;VALUE_C33=VALUE_B33=65535;VALUE_C35=VALUE_B35=0;VALUE_C36=VALUE_B36=65535;VALUE_C38=VALUE_B38=0;VALUE_C39=VALUE_B39=65535;VALUE_C41=VALUE_B41=0;VALUE_C42=VALUE_B42=65535;VALUE_C44=VALUE_B44=0;VALUE_C45=VALUE_B45=65535;VALUE_C47=VALUE_B47=0;VALUE_C48=VALUE_B48=65535;VALUE_C50=VALUE_B50=0;VALUE_C51=VALUE_B51=65535;VALUE_C53=VALUE_B53=0;VALUE_C54=VALUE_B54=65535;VALUE_C56=VALUE_B56=0;VALUE_C57=VALUE_B57=65535;VALUE_C59=VALUE_B59=0;VALUE_C60=VALUE_B60=65535;VALUE_C62=VALUE_B62=0;VALUE_C63=VALUE_B63=65535;VALUE_C65=VALUE_B65=0;VALUE_C66=VALUE_B66=65535;VALUE_C68=VALUE_B68=0;VALUE_C69=VALUE_B69=65535;VALUE_C71=VALUE_B71=0;

#ifdef INVERTORS
	VALUE_C0=~VALUE_C0; VALUE_C2=~VALUE_C2; VALUE_C3=~VALUE_C3; VALUE_C5=~VALUE_C5; VALUE_C6=~VALUE_C6; VALUE_C8=~VALUE_C8; VALUE_C9=~VALUE_C9; VALUE_C11=~VALUE_C11; VALUE_C12=~VALUE_C12; VALUE_C14=~VALUE_C14; VALUE_C15=~VALUE_C15; VALUE_C17=~VALUE_C17; VALUE_C18=~VALUE_C18; VALUE_C20=~VALUE_C20; VALUE_C21=~VALUE_C21; VALUE_C23=~VALUE_C23; VALUE_C24=~VALUE_C24; VALUE_C26=~VALUE_C26; VALUE_C27=~VALUE_C27; VALUE_C29=~VALUE_C29; VALUE_C30=~VALUE_C30; VALUE_C32=~VALUE_C32; VALUE_C33=~VALUE_C33; VALUE_C35=~VALUE_C35; VALUE_C36=~VALUE_C36; VALUE_C38=~VALUE_C38; VALUE_C39=~VALUE_C39; VALUE_C41=~VALUE_C41; VALUE_C42=~VALUE_C42; VALUE_C44=~VALUE_C44; VALUE_C45=~VALUE_C45; VALUE_C47=~VALUE_C47; VALUE_C48=~VALUE_C48; VALUE_C50=~VALUE_C50; VALUE_C51=~VALUE_C51; VALUE_C53=~VALUE_C53; VALUE_C54=~VALUE_C54; VALUE_C56=~VALUE_C56; VALUE_C57=~VALUE_C57; VALUE_C59=~VALUE_C59; VALUE_C60=~VALUE_C60; VALUE_C62=~VALUE_C62; VALUE_C63=~VALUE_C63; VALUE_C65=~VALUE_C65; VALUE_C66=~VALUE_C66; VALUE_C68=~VALUE_C68; VALUE_C69=~VALUE_C69; VALUE_C71=~VALUE_C71;
	VALUE_B0=~VALUE_B0; VALUE_B2=~VALUE_B2; VALUE_B3=~VALUE_B3; VALUE_B5=~VALUE_B5; VALUE_B6=~VALUE_B6; VALUE_B8=~VALUE_B8; VALUE_B9=~VALUE_B9; VALUE_B11=~VALUE_B11; VALUE_B12=~VALUE_B12; VALUE_B14=~VALUE_B14; VALUE_B15=~VALUE_B15; VALUE_B17=~VALUE_B17; VALUE_B18=~VALUE_B18; VALUE_B20=~VALUE_B20; VALUE_B21=~VALUE_B21; VALUE_B23=~VALUE_B23; VALUE_B24=~VALUE_B24; VALUE_B26=~VALUE_B26; VALUE_B27=~VALUE_B27; VALUE_B29=~VALUE_B29; VALUE_B30=~VALUE_B30; VALUE_B32=~VALUE_B32; VALUE_B33=~VALUE_B33; VALUE_B35=~VALUE_B35; VALUE_B36=~VALUE_B36; VALUE_B38=~VALUE_B38; VALUE_B39=~VALUE_B39; VALUE_B41=~VALUE_B41; VALUE_B42=~VALUE_B42; VALUE_B44=~VALUE_B44; VALUE_B45=~VALUE_B45; VALUE_B47=~VALUE_B47; VALUE_B48=~VALUE_B48; VALUE_B50=~VALUE_B50; VALUE_B51=~VALUE_B51; VALUE_B53=~VALUE_B53; VALUE_B54=~VALUE_B54; VALUE_B56=~VALUE_B56; VALUE_B57=~VALUE_B57; VALUE_B59=~VALUE_B59; VALUE_B60=~VALUE_B60; VALUE_B62=~VALUE_B62; VALUE_B63=~VALUE_B63; VALUE_B65=~VALUE_B65; VALUE_B66=~VALUE_B66; VALUE_B68=~VALUE_B68; VALUE_B69=~VALUE_B69; VALUE_B71=~VALUE_B71;
#endif

	uint8_t* ptr = ledData;
	int count = ledDataEnd - ptr;
	count/=60;
	count*=60;
	uint8_t* ptrEnd = ptr + count;
	while (ptr < ptrEnd)
	{

		//VALUE_C1=VALUE_B1=0;VALUE_C4=VALUE_B4=0;VALUE_C7=VALUE_B7=0;VALUE_C10=VALUE_B10=0;VALUE_C13=VALUE_B13=0;VALUE_C16=VALUE_B16=0;VALUE_C19=VALUE_B19=0;VALUE_C22=VALUE_B22=0;VALUE_C25=VALUE_B25=0;VALUE_C28=VALUE_B28=0;VALUE_C31=VALUE_B31=0;VALUE_C34=VALUE_B34=0;VALUE_C37=VALUE_B37=0;VALUE_C40=VALUE_B40=0;VALUE_C43=VALUE_B43=0;VALUE_C46=VALUE_B46=0;VALUE_C49=VALUE_B49=0;VALUE_C52=VALUE_B52=0;VALUE_C55=VALUE_B55=0;VALUE_C58=VALUE_B58=0;VALUE_C61=VALUE_B61=0;VALUE_C64=VALUE_B64=0;VALUE_C67=VALUE_B67=0;VALUE_C70=VALUE_B70=0;
		VALUE_C1=0; VALUE_C4=0; VALUE_C7=0; VALUE_C10=0; VALUE_C13=0; VALUE_C16=0; VALUE_C19=0; VALUE_C22=0; VALUE_C25=0; VALUE_C28=0; VALUE_C31=0; VALUE_C34=0; VALUE_C37=0; VALUE_C40=0; VALUE_C43=0; VALUE_C46=0; VALUE_C49=0; VALUE_C52=0; VALUE_C55=0; VALUE_C58=0; VALUE_C61=0; VALUE_C64=0; VALUE_C67=0; VALUE_C70=0;
		
		VALUE_C1 |= (int32_t)(ptr[0] & 1); //лента #0 bit #0 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 0 бит
		VALUE_C1 |= (int32_t)(ptr[3] & 1) << 3; //лента #1 bit #0 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 3 бит
		VALUE_C1 |= (int32_t)(ptr[6] & 1) << 4; //лента #2 bit #0 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 4 бит
		VALUE_C1 |= (int32_t)(ptr[9] & 1) << 5; //лента #3 bit #0 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 5 бит
		VALUE_C1 |= (int32_t)(ptr[12] & 1) << 6; //лента #4 bit #0 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 6 бит
		VALUE_C1 |= (int32_t)(ptr[15] & 1) << 7; //лента #5 bit #0 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 7 бит
		VALUE_C1 |= (int32_t)(ptr[18] & 1) << 8; //лента #6 bit #0 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 8 бит
		VALUE_C1 |= (int32_t)(ptr[21] & 1) << 9; //лента #7 bit #0 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 9 бит
		VALUE_C1 |= (int32_t)(ptr[24] & 1) << 10; //лента #8 bit #0 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 10 бит
		VALUE_C1 |= (int32_t)(ptr[27] & 1) << 11; //лента #9 bit #0 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 11 бит
		VALUE_C1 |= (int32_t)(ptr[30] & 1) << 12; //лента #10 bit #0 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 12 бит
		VALUE_C1 |= (int32_t)(ptr[33] & 1) << 13; //лента #11 bit #0 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 13 бит
		VALUE_C1 |= (int32_t)(ptr[36] & 1) << 14; //лента #12 bit #0 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 14 бит
		VALUE_C1 |= (int32_t)(ptr[39] & 1) << 15; //лента #13 bit #0 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 15 бит
		VALUE_C4 |= (int32_t)(ptr[0] & 2) >> 1; //лента #0 bit #1 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на -1 бит
		VALUE_C4 |= (int32_t)(ptr[3] & 2) << 2; //лента #1 bit #1 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 2 бит
		VALUE_C4 |= (int32_t)(ptr[6] & 2) << 3; //лента #2 bit #1 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 3 бит
		VALUE_C4 |= (int32_t)(ptr[9] & 2) << 4; //лента #3 bit #1 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 4 бит
		VALUE_C4 |= (int32_t)(ptr[12] & 2) << 5; //лента #4 bit #1 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 5 бит
		VALUE_C4 |= (int32_t)(ptr[15] & 2) << 6; //лента #5 bit #1 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 6 бит
		VALUE_C4 |= (int32_t)(ptr[18] & 2) << 7; //лента #6 bit #1 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 7 бит
		VALUE_C4 |= (int32_t)(ptr[21] & 2) << 8; //лента #7 bit #1 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 8 бит
		VALUE_C4 |= (int32_t)(ptr[24] & 2) << 9; //лента #8 bit #1 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 9 бит
		VALUE_C4 |= (int32_t)(ptr[27] & 2) << 10; //лента #9 bit #1 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 10 бит
		VALUE_C4 |= (int32_t)(ptr[30] & 2) << 11; //лента #10 bit #1 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 11 бит
		VALUE_C4 |= (int32_t)(ptr[33] & 2) << 12; //лента #11 bit #1 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 12 бит
		VALUE_C4 |= (int32_t)(ptr[36] & 2) << 13; //лента #12 bit #1 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 13 бит
		VALUE_C4 |= (int32_t)(ptr[39] & 2) << 14; //лента #13 bit #1 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 14 бит
		VALUE_C7 |= (int32_t)(ptr[0] & 4) >> 2; //лента #0 bit #2 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на -2 бит
		VALUE_C7 |= (int32_t)(ptr[3] & 4) << 1; //лента #1 bit #2 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 1 бит
		VALUE_C7 |= (int32_t)(ptr[6] & 4) << 2; //лента #2 bit #2 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 2 бит
		VALUE_C7 |= (int32_t)(ptr[9] & 4) << 3; //лента #3 bit #2 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 3 бит
		VALUE_C7 |= (int32_t)(ptr[12] & 4) << 4; //лента #4 bit #2 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 4 бит
		VALUE_C7 |= (int32_t)(ptr[15] & 4) << 5; //лента #5 bit #2 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 5 бит
		VALUE_C7 |= (int32_t)(ptr[18] & 4) << 6; //лента #6 bit #2 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 6 бит
		VALUE_C7 |= (int32_t)(ptr[21] & 4) << 7; //лента #7 bit #2 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 7 бит
		VALUE_C7 |= (int32_t)(ptr[24] & 4) << 8; //лента #8 bit #2 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 8 бит
		VALUE_C7 |= (int32_t)(ptr[27] & 4) << 9; //лента #9 bit #2 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 9 бит
		VALUE_C7 |= (int32_t)(ptr[30] & 4) << 10; //лента #10 bit #2 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 10 бит
		VALUE_C7 |= (int32_t)(ptr[33] & 4) << 11; //лента #11 bit #2 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 11 бит
		VALUE_C7 |= (int32_t)(ptr[36] & 4) << 12; //лента #12 bit #2 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 12 бит
		VALUE_C7 |= (int32_t)(ptr[39] & 4) << 13; //лента #13 bit #2 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 13 бит
		VALUE_C10 |= (int32_t)(ptr[0] & 8) >> 3; //лента #0 bit #3 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на -3 бит
		VALUE_C10 |= (int32_t)(ptr[3] & 8); //лента #1 bit #3 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 0 бит
		VALUE_C10 |= (int32_t)(ptr[6] & 8) << 1; //лента #2 bit #3 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 1 бит
		VALUE_C10 |= (int32_t)(ptr[9] & 8) << 2; //лента #3 bit #3 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 2 бит
		VALUE_C10 |= (int32_t)(ptr[12] & 8) << 3; //лента #4 bit #3 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 3 бит
		VALUE_C10 |= (int32_t)(ptr[15] & 8) << 4; //лента #5 bit #3 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 4 бит
		VALUE_C10 |= (int32_t)(ptr[18] & 8) << 5; //лента #6 bit #3 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 5 бит
		VALUE_C10 |= (int32_t)(ptr[21] & 8) << 6; //лента #7 bit #3 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 6 бит
		VALUE_C10 |= (int32_t)(ptr[24] & 8) << 7; //лента #8 bit #3 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 7 бит
		VALUE_C10 |= (int32_t)(ptr[27] & 8) << 8; //лента #9 bit #3 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 8 бит
		VALUE_C10 |= (int32_t)(ptr[30] & 8) << 9; //лента #10 bit #3 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 9 бит
		VALUE_C10 |= (int32_t)(ptr[33] & 8) << 10; //лента #11 bit #3 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 10 бит
		VALUE_C10 |= (int32_t)(ptr[36] & 8) << 11; //лента #12 bit #3 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 11 бит
		VALUE_C10 |= (int32_t)(ptr[39] & 8) << 12; //лента #13 bit #3 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 12 бит
		VALUE_C13 |= (int32_t)(ptr[0] & 16) >> 4; //лента #0 bit #4 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -4 бит
		VALUE_C13 |= (int32_t)(ptr[3] & 16) >> 1; //лента #1 bit #4 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -1 бит
		VALUE_C13 |= (int32_t)(ptr[6] & 16); //лента #2 bit #4 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 0 бит
		VALUE_C13 |= (int32_t)(ptr[9] & 16) << 1; //лента #3 bit #4 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 1 бит
		VALUE_C13 |= (int32_t)(ptr[12] & 16) << 2; //лента #4 bit #4 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 2 бит
		VALUE_C13 |= (int32_t)(ptr[15] & 16) << 3; //лента #5 bit #4 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 3 бит
		VALUE_C13 |= (int32_t)(ptr[18] & 16) << 4; //лента #6 bit #4 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 4 бит
		VALUE_C13 |= (int32_t)(ptr[21] & 16) << 5; //лента #7 bit #4 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 5 бит
		VALUE_C13 |= (int32_t)(ptr[24] & 16) << 6; //лента #8 bit #4 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 6 бит
		VALUE_C13 |= (int32_t)(ptr[27] & 16) << 7; //лента #9 bit #4 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 7 бит
		VALUE_C13 |= (int32_t)(ptr[30] & 16) << 8; //лента #10 bit #4 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 8 бит
		VALUE_C13 |= (int32_t)(ptr[33] & 16) << 9; //лента #11 bit #4 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 9 бит
		VALUE_C13 |= (int32_t)(ptr[36] & 16) << 10; //лента #12 bit #4 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 10 бит
		VALUE_C13 |= (int32_t)(ptr[39] & 16) << 11; //лента #13 bit #4 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 11 бит
		VALUE_C16 |= (int32_t)(ptr[0] & 32) >> 5; //лента #0 bit #5 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -5 бит
		VALUE_C16 |= (int32_t)(ptr[3] & 32) >> 2; //лента #1 bit #5 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -2 бит
		VALUE_C16 |= (int32_t)(ptr[6] & 32) >> 1; //лента #2 bit #5 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -1 бит
		VALUE_C16 |= (int32_t)(ptr[9] & 32); //лента #3 bit #5 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 0 бит
		VALUE_C16 |= (int32_t)(ptr[12] & 32) << 1; //лента #4 bit #5 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 1 бит
		VALUE_C16 |= (int32_t)(ptr[15] & 32) << 2; //лента #5 bit #5 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 2 бит
		VALUE_C16 |= (int32_t)(ptr[18] & 32) << 3; //лента #6 bit #5 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 3 бит
		VALUE_C16 |= (int32_t)(ptr[21] & 32) << 4; //лента #7 bit #5 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 4 бит
		VALUE_C16 |= (int32_t)(ptr[24] & 32) << 5; //лента #8 bit #5 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 5 бит
		VALUE_C16 |= (int32_t)(ptr[27] & 32) << 6; //лента #9 bit #5 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 6 бит
		VALUE_C16 |= (int32_t)(ptr[30] & 32) << 7; //лента #10 bit #5 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 7 бит
		VALUE_C16 |= (int32_t)(ptr[33] & 32) << 8; //лента #11 bit #5 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 8 бит
		VALUE_C16 |= (int32_t)(ptr[36] & 32) << 9; //лента #12 bit #5 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 9 бит
		VALUE_C16 |= (int32_t)(ptr[39] & 32) << 10; //лента #13 bit #5 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 10 бит
		VALUE_C19 |= (int32_t)(ptr[0] & 64) >> 6; //лента #0 bit #6 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -6 бит
		VALUE_C19 |= (int32_t)(ptr[3] & 64) >> 3; //лента #1 bit #6 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -3 бит
		VALUE_C19 |= (int32_t)(ptr[6] & 64) >> 2; //лента #2 bit #6 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -2 бит
		VALUE_C19 |= (int32_t)(ptr[9] & 64) >> 1; //лента #3 bit #6 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -1 бит
		VALUE_C19 |= (int32_t)(ptr[12] & 64); //лента #4 bit #6 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 0 бит
		VALUE_C19 |= (int32_t)(ptr[15] & 64) << 1; //лента #5 bit #6 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 1 бит
		VALUE_C19 |= (int32_t)(ptr[18] & 64) << 2; //лента #6 bit #6 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 2 бит
		VALUE_C19 |= (int32_t)(ptr[21] & 64) << 3; //лента #7 bit #6 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 3 бит
		VALUE_C19 |= (int32_t)(ptr[24] & 64) << 4; //лента #8 bit #6 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 4 бит
		VALUE_C19 |= (int32_t)(ptr[27] & 64) << 5; //лента #9 bit #6 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 5 бит
		VALUE_C19 |= (int32_t)(ptr[30] & 64) << 6; //лента #10 bit #6 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 6 бит
		VALUE_C19 |= (int32_t)(ptr[33] & 64) << 7; //лента #11 bit #6 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 7 бит
		VALUE_C19 |= (int32_t)(ptr[36] & 64) << 8; //лента #12 bit #6 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 8 бит
		VALUE_C19 |= (int32_t)(ptr[39] & 64) << 9; //лента #13 bit #6 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 9 бит
		VALUE_C22 |= (int32_t)(ptr[0] & 128) >> 7; //лента #0 bit #7 ch #0, надо заполнить 0 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -7 бит
		VALUE_C22 |= (int32_t)(ptr[3] & 128) >> 4; //лента #1 bit #7 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -4 бит
		VALUE_C22 |= (int32_t)(ptr[6] & 128) >> 3; //лента #2 bit #7 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -3 бит
		VALUE_C22 |= (int32_t)(ptr[9] & 128) >> 2; //лента #3 bit #7 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -2 бит
		VALUE_C22 |= (int32_t)(ptr[12] & 128) >> 1; //лента #4 bit #7 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -1 бит
		VALUE_C22 |= (int32_t)(ptr[15] & 128); //лента #5 bit #7 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 0 бит
		VALUE_C22 |= (int32_t)(ptr[18] & 128) << 1; //лента #6 bit #7 ch #0, надо заполнить 8 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 1 бит
		VALUE_C22 |= (int32_t)(ptr[21] & 128) << 2; //лента #7 bit #7 ch #0, надо заполнить 9 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 2 бит
		VALUE_C22 |= (int32_t)(ptr[24] & 128) << 3; //лента #8 bit #7 ch #0, надо заполнить 10 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 3 бит
		VALUE_C22 |= (int32_t)(ptr[27] & 128) << 4; //лента #9 bit #7 ch #0, надо заполнить 11 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 4 бит
		VALUE_C22 |= (int32_t)(ptr[30] & 128) << 5; //лента #10 bit #7 ch #0, надо заполнить 12 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 5 бит
		VALUE_C22 |= (int32_t)(ptr[33] & 128) << 6; //лента #11 bit #7 ch #0, надо заполнить 13 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 6 бит
		VALUE_C22 |= (int32_t)(ptr[36] & 128) << 7; //лента #12 bit #7 ch #0, надо заполнить 14 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 7 бит
		VALUE_C22 |= (int32_t)(ptr[39] & 128) << 8; //лента #13 bit #7 ch #0, надо заполнить 15 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 8 бит
		VALUE_C25 |= (int32_t)(ptr[1] & 1); //лента #0 bit #0 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 0 бит
		VALUE_C25 |= (int32_t)(ptr[4] & 1) << 3; //лента #1 bit #0 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 3 бит
		VALUE_C25 |= (int32_t)(ptr[7] & 1) << 4; //лента #2 bit #0 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 4 бит
		VALUE_C25 |= (int32_t)(ptr[10] & 1) << 5; //лента #3 bit #0 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 5 бит
		VALUE_C25 |= (int32_t)(ptr[13] & 1) << 6; //лента #4 bit #0 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 6 бит
		VALUE_C25 |= (int32_t)(ptr[16] & 1) << 7; //лента #5 bit #0 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 7 бит
		VALUE_C25 |= (int32_t)(ptr[19] & 1) << 8; //лента #6 bit #0 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 8 бит
		VALUE_C25 |= (int32_t)(ptr[22] & 1) << 9; //лента #7 bit #0 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 9 бит
		VALUE_C25 |= (int32_t)(ptr[25] & 1) << 10; //лента #8 bit #0 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 10 бит
		VALUE_C25 |= (int32_t)(ptr[28] & 1) << 11; //лента #9 bit #0 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 11 бит
		VALUE_C25 |= (int32_t)(ptr[31] & 1) << 12; //лента #10 bit #0 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 12 бит
		VALUE_C25 |= (int32_t)(ptr[34] & 1) << 13; //лента #11 bit #0 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 13 бит
		VALUE_C25 |= (int32_t)(ptr[37] & 1) << 14; //лента #12 bit #0 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 14 бит
		VALUE_C25 |= (int32_t)(ptr[40] & 1) << 15; //лента #13 bit #0 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 15 бит
		VALUE_C28 |= (int32_t)(ptr[1] & 2) >> 1; //лента #0 bit #1 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на -1 бит
		VALUE_C28 |= (int32_t)(ptr[4] & 2) << 2; //лента #1 bit #1 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 2 бит
		VALUE_C28 |= (int32_t)(ptr[7] & 2) << 3; //лента #2 bit #1 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 3 бит
		VALUE_C28 |= (int32_t)(ptr[10] & 2) << 4; //лента #3 bit #1 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 4 бит
		VALUE_C28 |= (int32_t)(ptr[13] & 2) << 5; //лента #4 bit #1 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 5 бит
		VALUE_C28 |= (int32_t)(ptr[16] & 2) << 6; //лента #5 bit #1 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 6 бит
		VALUE_C28 |= (int32_t)(ptr[19] & 2) << 7; //лента #6 bit #1 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 7 бит
		VALUE_C28 |= (int32_t)(ptr[22] & 2) << 8; //лента #7 bit #1 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 8 бит
		VALUE_C28 |= (int32_t)(ptr[25] & 2) << 9; //лента #8 bit #1 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 9 бит
		VALUE_C28 |= (int32_t)(ptr[28] & 2) << 10; //лента #9 bit #1 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 10 бит
		VALUE_C28 |= (int32_t)(ptr[31] & 2) << 11; //лента #10 bit #1 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 11 бит
		VALUE_C28 |= (int32_t)(ptr[34] & 2) << 12; //лента #11 bit #1 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 12 бит
		VALUE_C28 |= (int32_t)(ptr[37] & 2) << 13; //лента #12 bit #1 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 13 бит
		VALUE_C28 |= (int32_t)(ptr[40] & 2) << 14; //лента #13 bit #1 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 14 бит
		VALUE_C31 |= (int32_t)(ptr[1] & 4) >> 2; //лента #0 bit #2 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на -2 бит
		VALUE_C31 |= (int32_t)(ptr[4] & 4) << 1; //лента #1 bit #2 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 1 бит
		VALUE_C31 |= (int32_t)(ptr[7] & 4) << 2; //лента #2 bit #2 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 2 бит
		VALUE_C31 |= (int32_t)(ptr[10] & 4) << 3; //лента #3 bit #2 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 3 бит
		VALUE_C31 |= (int32_t)(ptr[13] & 4) << 4; //лента #4 bit #2 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 4 бит
		VALUE_C31 |= (int32_t)(ptr[16] & 4) << 5; //лента #5 bit #2 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 5 бит
		VALUE_C31 |= (int32_t)(ptr[19] & 4) << 6; //лента #6 bit #2 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 6 бит
		VALUE_C31 |= (int32_t)(ptr[22] & 4) << 7; //лента #7 bit #2 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 7 бит
		VALUE_C31 |= (int32_t)(ptr[25] & 4) << 8; //лента #8 bit #2 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 8 бит
		VALUE_C31 |= (int32_t)(ptr[28] & 4) << 9; //лента #9 bit #2 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 9 бит
		VALUE_C31 |= (int32_t)(ptr[31] & 4) << 10; //лента #10 bit #2 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 10 бит
		VALUE_C31 |= (int32_t)(ptr[34] & 4) << 11; //лента #11 bit #2 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 11 бит
		VALUE_C31 |= (int32_t)(ptr[37] & 4) << 12; //лента #12 bit #2 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 12 бит
		VALUE_C31 |= (int32_t)(ptr[40] & 4) << 13; //лента #13 bit #2 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 13 бит
		VALUE_C34 |= (int32_t)(ptr[1] & 8) >> 3; //лента #0 bit #3 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на -3 бит
		VALUE_C34 |= (int32_t)(ptr[4] & 8); //лента #1 bit #3 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 0 бит
		VALUE_C34 |= (int32_t)(ptr[7] & 8) << 1; //лента #2 bit #3 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 1 бит
		VALUE_C34 |= (int32_t)(ptr[10] & 8) << 2; //лента #3 bit #3 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 2 бит
		VALUE_C34 |= (int32_t)(ptr[13] & 8) << 3; //лента #4 bit #3 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 3 бит
		VALUE_C34 |= (int32_t)(ptr[16] & 8) << 4; //лента #5 bit #3 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 4 бит
		VALUE_C34 |= (int32_t)(ptr[19] & 8) << 5; //лента #6 bit #3 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 5 бит
		VALUE_C34 |= (int32_t)(ptr[22] & 8) << 6; //лента #7 bit #3 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 6 бит
		VALUE_C34 |= (int32_t)(ptr[25] & 8) << 7; //лента #8 bit #3 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 7 бит
		VALUE_C34 |= (int32_t)(ptr[28] & 8) << 8; //лента #9 bit #3 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 8 бит
		VALUE_C34 |= (int32_t)(ptr[31] & 8) << 9; //лента #10 bit #3 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 9 бит
		VALUE_C34 |= (int32_t)(ptr[34] & 8) << 10; //лента #11 bit #3 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 10 бит
		VALUE_C34 |= (int32_t)(ptr[37] & 8) << 11; //лента #12 bit #3 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 11 бит
		VALUE_C34 |= (int32_t)(ptr[40] & 8) << 12; //лента #13 bit #3 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 12 бит
		VALUE_C37 |= (int32_t)(ptr[1] & 16) >> 4; //лента #0 bit #4 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -4 бит
		VALUE_C37 |= (int32_t)(ptr[4] & 16) >> 1; //лента #1 bit #4 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -1 бит
		VALUE_C37 |= (int32_t)(ptr[7] & 16); //лента #2 bit #4 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 0 бит
		VALUE_C37 |= (int32_t)(ptr[10] & 16) << 1; //лента #3 bit #4 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 1 бит
		VALUE_C37 |= (int32_t)(ptr[13] & 16) << 2; //лента #4 bit #4 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 2 бит
		VALUE_C37 |= (int32_t)(ptr[16] & 16) << 3; //лента #5 bit #4 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 3 бит
		VALUE_C37 |= (int32_t)(ptr[19] & 16) << 4; //лента #6 bit #4 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 4 бит
		VALUE_C37 |= (int32_t)(ptr[22] & 16) << 5; //лента #7 bit #4 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 5 бит
		VALUE_C37 |= (int32_t)(ptr[25] & 16) << 6; //лента #8 bit #4 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 6 бит
		VALUE_C37 |= (int32_t)(ptr[28] & 16) << 7; //лента #9 bit #4 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 7 бит
		VALUE_C37 |= (int32_t)(ptr[31] & 16) << 8; //лента #10 bit #4 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 8 бит
		VALUE_C37 |= (int32_t)(ptr[34] & 16) << 9; //лента #11 bit #4 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 9 бит
		VALUE_C37 |= (int32_t)(ptr[37] & 16) << 10; //лента #12 bit #4 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 10 бит
		VALUE_C37 |= (int32_t)(ptr[40] & 16) << 11; //лента #13 bit #4 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 11 бит
		VALUE_C40 |= (int32_t)(ptr[1] & 32) >> 5; //лента #0 bit #5 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -5 бит
		VALUE_C40 |= (int32_t)(ptr[4] & 32) >> 2; //лента #1 bit #5 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -2 бит
		VALUE_C40 |= (int32_t)(ptr[7] & 32) >> 1; //лента #2 bit #5 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -1 бит
		VALUE_C40 |= (int32_t)(ptr[10] & 32); //лента #3 bit #5 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 0 бит
		VALUE_C40 |= (int32_t)(ptr[13] & 32) << 1; //лента #4 bit #5 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 1 бит
		VALUE_C40 |= (int32_t)(ptr[16] & 32) << 2; //лента #5 bit #5 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 2 бит
		VALUE_C40 |= (int32_t)(ptr[19] & 32) << 3; //лента #6 bit #5 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 3 бит
		VALUE_C40 |= (int32_t)(ptr[22] & 32) << 4; //лента #7 bit #5 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 4 бит
		VALUE_C40 |= (int32_t)(ptr[25] & 32) << 5; //лента #8 bit #5 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 5 бит
		VALUE_C40 |= (int32_t)(ptr[28] & 32) << 6; //лента #9 bit #5 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 6 бит
		VALUE_C40 |= (int32_t)(ptr[31] & 32) << 7; //лента #10 bit #5 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 7 бит
		VALUE_C40 |= (int32_t)(ptr[34] & 32) << 8; //лента #11 bit #5 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 8 бит
		VALUE_C40 |= (int32_t)(ptr[37] & 32) << 9; //лента #12 bit #5 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 9 бит
		VALUE_C40 |= (int32_t)(ptr[40] & 32) << 10; //лента #13 bit #5 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 10 бит
		VALUE_C43 |= (int32_t)(ptr[1] & 64) >> 6; //лента #0 bit #6 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -6 бит
		VALUE_C43 |= (int32_t)(ptr[4] & 64) >> 3; //лента #1 bit #6 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -3 бит
		VALUE_C43 |= (int32_t)(ptr[7] & 64) >> 2; //лента #2 bit #6 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -2 бит
		VALUE_C43 |= (int32_t)(ptr[10] & 64) >> 1; //лента #3 bit #6 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -1 бит
		VALUE_C43 |= (int32_t)(ptr[13] & 64); //лента #4 bit #6 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 0 бит
		VALUE_C43 |= (int32_t)(ptr[16] & 64) << 1; //лента #5 bit #6 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 1 бит
		VALUE_C43 |= (int32_t)(ptr[19] & 64) << 2; //лента #6 bit #6 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 2 бит
		VALUE_C43 |= (int32_t)(ptr[22] & 64) << 3; //лента #7 bit #6 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 3 бит
		VALUE_C43 |= (int32_t)(ptr[25] & 64) << 4; //лента #8 bit #6 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 4 бит
		VALUE_C43 |= (int32_t)(ptr[28] & 64) << 5; //лента #9 bit #6 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 5 бит
		VALUE_C43 |= (int32_t)(ptr[31] & 64) << 6; //лента #10 bit #6 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 6 бит
		VALUE_C43 |= (int32_t)(ptr[34] & 64) << 7; //лента #11 bit #6 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 7 бит
		VALUE_C43 |= (int32_t)(ptr[37] & 64) << 8; //лента #12 bit #6 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 8 бит
		VALUE_C43 |= (int32_t)(ptr[40] & 64) << 9; //лента #13 bit #6 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 9 бит
		VALUE_C46 |= (int32_t)(ptr[1] & 128) >> 7; //лента #0 bit #7 ch #1, надо заполнить 0 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -7 бит
		VALUE_C46 |= (int32_t)(ptr[4] & 128) >> 4; //лента #1 bit #7 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -4 бит
		VALUE_C46 |= (int32_t)(ptr[7] & 128) >> 3; //лента #2 bit #7 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -3 бит
		VALUE_C46 |= (int32_t)(ptr[10] & 128) >> 2; //лента #3 bit #7 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -2 бит
		VALUE_C46 |= (int32_t)(ptr[13] & 128) >> 1; //лента #4 bit #7 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -1 бит
		VALUE_C46 |= (int32_t)(ptr[16] & 128); //лента #5 bit #7 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 0 бит
		VALUE_C46 |= (int32_t)(ptr[19] & 128) << 1; //лента #6 bit #7 ch #1, надо заполнить 8 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 1 бит
		VALUE_C46 |= (int32_t)(ptr[22] & 128) << 2; //лента #7 bit #7 ch #1, надо заполнить 9 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 2 бит
		VALUE_C46 |= (int32_t)(ptr[25] & 128) << 3; //лента #8 bit #7 ch #1, надо заполнить 10 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 3 бит
		VALUE_C46 |= (int32_t)(ptr[28] & 128) << 4; //лента #9 bit #7 ch #1, надо заполнить 11 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 4 бит
		VALUE_C46 |= (int32_t)(ptr[31] & 128) << 5; //лента #10 bit #7 ch #1, надо заполнить 12 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 5 бит
		VALUE_C46 |= (int32_t)(ptr[34] & 128) << 6; //лента #11 bit #7 ch #1, надо заполнить 13 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 6 бит
		VALUE_C46 |= (int32_t)(ptr[37] & 128) << 7; //лента #12 bit #7 ch #1, надо заполнить 14 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 7 бит
		VALUE_C46 |= (int32_t)(ptr[40] & 128) << 8; //лента #13 bit #7 ch #1, надо заполнить 15 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 8 бит
		VALUE_C49 |= (int32_t)(ptr[2] & 1); //лента #0 bit #0 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 0 бит
		VALUE_C49 |= (int32_t)(ptr[5] & 1) << 3; //лента #1 bit #0 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 3 бит
		VALUE_C49 |= (int32_t)(ptr[8] & 1) << 4; //лента #2 bit #0 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 4 бит
		VALUE_C49 |= (int32_t)(ptr[11] & 1) << 5; //лента #3 bit #0 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 5 бит
		VALUE_C49 |= (int32_t)(ptr[14] & 1) << 6; //лента #4 bit #0 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 6 бит
		VALUE_C49 |= (int32_t)(ptr[17] & 1) << 7; //лента #5 bit #0 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 7 бит
		VALUE_C49 |= (int32_t)(ptr[20] & 1) << 8; //лента #6 bit #0 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 8 бит
		VALUE_C49 |= (int32_t)(ptr[23] & 1) << 9; //лента #7 bit #0 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 9 бит
		VALUE_C49 |= (int32_t)(ptr[26] & 1) << 10; //лента #8 bit #0 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 10 бит
		VALUE_C49 |= (int32_t)(ptr[29] & 1) << 11; //лента #9 bit #0 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 11 бит
		VALUE_C49 |= (int32_t)(ptr[32] & 1) << 12; //лента #10 bit #0 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 12 бит
		VALUE_C49 |= (int32_t)(ptr[35] & 1) << 13; //лента #11 bit #0 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 13 бит
		VALUE_C49 |= (int32_t)(ptr[38] & 1) << 14; //лента #12 bit #0 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 14 бит
		VALUE_C49 |= (int32_t)(ptr[41] & 1) << 15; //лента #13 bit #0 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 15 бит
		VALUE_C52 |= (int32_t)(ptr[2] & 2) >> 1; //лента #0 bit #1 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на -1 бит
		VALUE_C52 |= (int32_t)(ptr[5] & 2) << 2; //лента #1 bit #1 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 2 бит
		VALUE_C52 |= (int32_t)(ptr[8] & 2) << 3; //лента #2 bit #1 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 3 бит
		VALUE_C52 |= (int32_t)(ptr[11] & 2) << 4; //лента #3 bit #1 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 4 бит
		VALUE_C52 |= (int32_t)(ptr[14] & 2) << 5; //лента #4 bit #1 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 5 бит
		VALUE_C52 |= (int32_t)(ptr[17] & 2) << 6; //лента #5 bit #1 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 6 бит
		VALUE_C52 |= (int32_t)(ptr[20] & 2) << 7; //лента #6 bit #1 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 7 бит
		VALUE_C52 |= (int32_t)(ptr[23] & 2) << 8; //лента #7 bit #1 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 8 бит
		VALUE_C52 |= (int32_t)(ptr[26] & 2) << 9; //лента #8 bit #1 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 9 бит
		VALUE_C52 |= (int32_t)(ptr[29] & 2) << 10; //лента #9 bit #1 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 10 бит
		VALUE_C52 |= (int32_t)(ptr[32] & 2) << 11; //лента #10 bit #1 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 11 бит
		VALUE_C52 |= (int32_t)(ptr[35] & 2) << 12; //лента #11 bit #1 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 12 бит
		VALUE_C52 |= (int32_t)(ptr[38] & 2) << 13; //лента #12 bit #1 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 13 бит
		VALUE_C52 |= (int32_t)(ptr[41] & 2) << 14; //лента #13 bit #1 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 14 бит
		VALUE_C55 |= (int32_t)(ptr[2] & 4) >> 2; //лента #0 bit #2 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на -2 бит
		VALUE_C55 |= (int32_t)(ptr[5] & 4) << 1; //лента #1 bit #2 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 1 бит
		VALUE_C55 |= (int32_t)(ptr[8] & 4) << 2; //лента #2 bit #2 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 2 бит
		VALUE_C55 |= (int32_t)(ptr[11] & 4) << 3; //лента #3 bit #2 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 3 бит
		VALUE_C55 |= (int32_t)(ptr[14] & 4) << 4; //лента #4 bit #2 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 4 бит
		VALUE_C55 |= (int32_t)(ptr[17] & 4) << 5; //лента #5 bit #2 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 5 бит
		VALUE_C55 |= (int32_t)(ptr[20] & 4) << 6; //лента #6 bit #2 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 6 бит
		VALUE_C55 |= (int32_t)(ptr[23] & 4) << 7; //лента #7 bit #2 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 7 бит
		VALUE_C55 |= (int32_t)(ptr[26] & 4) << 8; //лента #8 bit #2 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 8 бит
		VALUE_C55 |= (int32_t)(ptr[29] & 4) << 9; //лента #9 bit #2 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 9 бит
		VALUE_C55 |= (int32_t)(ptr[32] & 4) << 10; //лента #10 bit #2 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 10 бит
		VALUE_C55 |= (int32_t)(ptr[35] & 4) << 11; //лента #11 bit #2 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 11 бит
		VALUE_C55 |= (int32_t)(ptr[38] & 4) << 12; //лента #12 bit #2 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 12 бит
		VALUE_C55 |= (int32_t)(ptr[41] & 4) << 13; //лента #13 bit #2 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 13 бит
		VALUE_C58 |= (int32_t)(ptr[2] & 8) >> 3; //лента #0 bit #3 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на -3 бит
		VALUE_C58 |= (int32_t)(ptr[5] & 8); //лента #1 bit #3 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 0 бит
		VALUE_C58 |= (int32_t)(ptr[8] & 8) << 1; //лента #2 bit #3 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 1 бит
		VALUE_C58 |= (int32_t)(ptr[11] & 8) << 2; //лента #3 bit #3 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 2 бит
		VALUE_C58 |= (int32_t)(ptr[14] & 8) << 3; //лента #4 bit #3 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 3 бит
		VALUE_C58 |= (int32_t)(ptr[17] & 8) << 4; //лента #5 bit #3 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 4 бит
		VALUE_C58 |= (int32_t)(ptr[20] & 8) << 5; //лента #6 bit #3 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 5 бит
		VALUE_C58 |= (int32_t)(ptr[23] & 8) << 6; //лента #7 bit #3 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 6 бит
		VALUE_C58 |= (int32_t)(ptr[26] & 8) << 7; //лента #8 bit #3 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 7 бит
		VALUE_C58 |= (int32_t)(ptr[29] & 8) << 8; //лента #9 bit #3 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 8 бит
		VALUE_C58 |= (int32_t)(ptr[32] & 8) << 9; //лента #10 bit #3 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 9 бит
		VALUE_C58 |= (int32_t)(ptr[35] & 8) << 10; //лента #11 bit #3 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 10 бит
		VALUE_C58 |= (int32_t)(ptr[38] & 8) << 11; //лента #12 bit #3 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 11 бит
		VALUE_C58 |= (int32_t)(ptr[41] & 8) << 12; //лента #13 bit #3 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 12 бит
		VALUE_C61 |= (int32_t)(ptr[2] & 16) >> 4; //лента #0 bit #4 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -4 бит
		VALUE_C61 |= (int32_t)(ptr[5] & 16) >> 1; //лента #1 bit #4 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -1 бит
		VALUE_C61 |= (int32_t)(ptr[8] & 16); //лента #2 bit #4 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 0 бит
		VALUE_C61 |= (int32_t)(ptr[11] & 16) << 1; //лента #3 bit #4 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 1 бит
		VALUE_C61 |= (int32_t)(ptr[14] & 16) << 2; //лента #4 bit #4 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 2 бит
		VALUE_C61 |= (int32_t)(ptr[17] & 16) << 3; //лента #5 bit #4 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 3 бит
		VALUE_C61 |= (int32_t)(ptr[20] & 16) << 4; //лента #6 bit #4 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 4 бит
		VALUE_C61 |= (int32_t)(ptr[23] & 16) << 5; //лента #7 bit #4 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 5 бит
		VALUE_C61 |= (int32_t)(ptr[26] & 16) << 6; //лента #8 bit #4 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 6 бит
		VALUE_C61 |= (int32_t)(ptr[29] & 16) << 7; //лента #9 bit #4 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 7 бит
		VALUE_C61 |= (int32_t)(ptr[32] & 16) << 8; //лента #10 bit #4 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 8 бит
		VALUE_C61 |= (int32_t)(ptr[35] & 16) << 9; //лента #11 bit #4 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 9 бит
		VALUE_C61 |= (int32_t)(ptr[38] & 16) << 10; //лента #12 bit #4 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 10 бит
		VALUE_C61 |= (int32_t)(ptr[41] & 16) << 11; //лента #13 bit #4 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 11 бит
		VALUE_C64 |= (int32_t)(ptr[2] & 32) >> 5; //лента #0 bit #5 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -5 бит
		VALUE_C64 |= (int32_t)(ptr[5] & 32) >> 2; //лента #1 bit #5 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -2 бит
		VALUE_C64 |= (int32_t)(ptr[8] & 32) >> 1; //лента #2 bit #5 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -1 бит
		VALUE_C64 |= (int32_t)(ptr[11] & 32); //лента #3 bit #5 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 0 бит
		VALUE_C64 |= (int32_t)(ptr[14] & 32) << 1; //лента #4 bit #5 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 1 бит
		VALUE_C64 |= (int32_t)(ptr[17] & 32) << 2; //лента #5 bit #5 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 2 бит
		VALUE_C64 |= (int32_t)(ptr[20] & 32) << 3; //лента #6 bit #5 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 3 бит
		VALUE_C64 |= (int32_t)(ptr[23] & 32) << 4; //лента #7 bit #5 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 4 бит
		VALUE_C64 |= (int32_t)(ptr[26] & 32) << 5; //лента #8 bit #5 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 5 бит
		VALUE_C64 |= (int32_t)(ptr[29] & 32) << 6; //лента #9 bit #5 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 6 бит
		VALUE_C64 |= (int32_t)(ptr[32] & 32) << 7; //лента #10 bit #5 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 7 бит
		VALUE_C64 |= (int32_t)(ptr[35] & 32) << 8; //лента #11 bit #5 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 8 бит
		VALUE_C64 |= (int32_t)(ptr[38] & 32) << 9; //лента #12 bit #5 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 9 бит
		VALUE_C64 |= (int32_t)(ptr[41] & 32) << 10; //лента #13 bit #5 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 10 бит
		VALUE_C67 |= (int32_t)(ptr[2] & 64) >> 6; //лента #0 bit #6 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -6 бит
		VALUE_C67 |= (int32_t)(ptr[5] & 64) >> 3; //лента #1 bit #6 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -3 бит
		VALUE_C67 |= (int32_t)(ptr[8] & 64) >> 2; //лента #2 bit #6 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -2 бит
		VALUE_C67 |= (int32_t)(ptr[11] & 64) >> 1; //лента #3 bit #6 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -1 бит
		VALUE_C67 |= (int32_t)(ptr[14] & 64); //лента #4 bit #6 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 0 бит
		VALUE_C67 |= (int32_t)(ptr[17] & 64) << 1; //лента #5 bit #6 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 1 бит
		VALUE_C67 |= (int32_t)(ptr[20] & 64) << 2; //лента #6 bit #6 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 2 бит
		VALUE_C67 |= (int32_t)(ptr[23] & 64) << 3; //лента #7 bit #6 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 3 бит
		VALUE_C67 |= (int32_t)(ptr[26] & 64) << 4; //лента #8 bit #6 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 4 бит
		VALUE_C67 |= (int32_t)(ptr[29] & 64) << 5; //лента #9 bit #6 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 5 бит
		VALUE_C67 |= (int32_t)(ptr[32] & 64) << 6; //лента #10 bit #6 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 6 бит
		VALUE_C67 |= (int32_t)(ptr[35] & 64) << 7; //лента #11 bit #6 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 7 бит
		VALUE_C67 |= (int32_t)(ptr[38] & 64) << 8; //лента #12 bit #6 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 8 бит
		VALUE_C67 |= (int32_t)(ptr[41] & 64) << 9; //лента #13 bit #6 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 9 бит
		VALUE_C70 |= (int32_t)(ptr[2] & 128) >> 7; //лента #0 bit #7 ch #2, надо заполнить 0 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -7 бит
		VALUE_C70 |= (int32_t)(ptr[5] & 128) >> 4; //лента #1 bit #7 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -4 бит
		VALUE_C70 |= (int32_t)(ptr[8] & 128) >> 3; //лента #2 bit #7 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -3 бит
		VALUE_C70 |= (int32_t)(ptr[11] & 128) >> 2; //лента #3 bit #7 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -2 бит
		VALUE_C70 |= (int32_t)(ptr[14] & 128) >> 1; //лента #4 bit #7 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -1 бит
		VALUE_C70 |= (int32_t)(ptr[17] & 128); //лента #5 bit #7 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 0 бит
		VALUE_C70 |= (int32_t)(ptr[20] & 128) << 1; //лента #6 bit #7 ch #2, надо заполнить 8 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 1 бит
		VALUE_C70 |= (int32_t)(ptr[23] & 128) << 2; //лента #7 bit #7 ch #2, надо заполнить 9 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 2 бит
		VALUE_C70 |= (int32_t)(ptr[26] & 128) << 3; //лента #8 bit #7 ch #2, надо заполнить 10 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 3 бит
		VALUE_C70 |= (int32_t)(ptr[29] & 128) << 4; //лента #9 bit #7 ch #2, надо заполнить 11 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 4 бит
		VALUE_C70 |= (int32_t)(ptr[32] & 128) << 5; //лента #10 bit #7 ch #2, надо заполнить 12 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 5 бит
		VALUE_C70 |= (int32_t)(ptr[35] & 128) << 6; //лента #11 bit #7 ch #2, надо заполнить 13 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 6 бит
		VALUE_C70 |= (int32_t)(ptr[38] & 128) << 7; //лента #12 bit #7 ch #2, надо заполнить 14 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 7 бит
		VALUE_C70 |= (int32_t)(ptr[41] & 128) << 8; //лента #13 bit #7 ch #2, надо заполнить 15 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 8 бит
#ifdef INVERTORS
		VALUE_C1=~VALUE_C1; VALUE_C4=~VALUE_C4; VALUE_C7=~VALUE_C7; VALUE_C10=~VALUE_C10; VALUE_C13=~VALUE_C13; VALUE_C16=~VALUE_C16; VALUE_C19=~VALUE_C19; VALUE_C22=~VALUE_C22; VALUE_C25=~VALUE_C25; VALUE_C28=~VALUE_C28; VALUE_C31=~VALUE_C31; VALUE_C34=~VALUE_C34; VALUE_C37=~VALUE_C37; VALUE_C40=~VALUE_C40; VALUE_C43=~VALUE_C43; VALUE_C46=~VALUE_C46; VALUE_C49=~VALUE_C49; VALUE_C52=~VALUE_C52; VALUE_C55=~VALUE_C55; VALUE_C58=~VALUE_C58; VALUE_C61=~VALUE_C61; VALUE_C64=~VALUE_C64; VALUE_C67=~VALUE_C67; VALUE_C70=~VALUE_C70;
#endif

		__disable_irq();
		{
		GPIOC->ODR = VALUE_C0; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C1; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C2; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C3; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C4; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C5; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C6; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C7; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C8; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C9; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C10; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C11; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C12; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C13; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C14; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C15; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C16; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C17; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C18; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C19; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C20; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C21; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C22; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C23; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C24; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C25; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C26; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C27; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C28; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C29; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C30; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C31; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C32; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C33; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C34; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C35; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C36; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C37; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C38; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C39; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C40; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C41; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C42; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C43; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C44; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C45; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C46; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C47; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C48; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C49; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C50; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C51; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C52; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C53; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C54; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C55; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C56; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C57; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C58; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C59; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C60; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C61; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C62; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C63; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C64; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C65; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C66; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C67; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C68; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C69; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C70; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		GPIOC->ODR = VALUE_C71; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
		}
		__enable_irq();

		ptr+=20 * 3; //20 лент по 3 байта на ленту
	}
/*
 * *for (int ch = 0; ch < 3; ch++)
. for (int bit = 0; bit < 8; bit++)
. for (int strip = 0; strip < 6; strip++)
. {
.             var index = ch * 8 + bit;
.             var valueIndex = index * 3 + 1;
.             Console.Write($"VALUE_B{valueIndex} |= ");
.             Console.Write("(int32_t)(");
.             Console.Write($"ptr[{3*14 + strip * 3 + ch}]");
.             Console.Write($" & {Math.Pow(2, bit)}");
.             Console.Write($")");
.             int[] bitIndexes = new int[] { 2, 3, 4, 5, 6, 7, 8, 9 };
.             int newBitIndex = bitIndexes[strip];
.             int oldBitIndex = bit;
.             var delta = newBitIndex - oldBitIndex;
.             if (delta != 0)
. {
.                 if (delta > 0)
.                     Console.Write(" << ");
.                 else
.                     Console.Write(" >> ");
.
.                 Console.Write($"{Math.Abs(delta)}");
. }
.             Console.WriteLine($"; //лента #{strip+14} bit #{bit} ch #{ch}, надо заполнить {newBitIndex} бит маски, но инфа о нем хранится в {oldBitIndex}, поэтому сдвигаемся на {delta} бит");
. }
 */
	ptr = ledData;
	while (ptr < ptrEnd)
	{
			//VALUE_C1=VALUE_B1=0;VALUE_C4=VALUE_B4=0;VALUE_C7=VALUE_B7=0;VALUE_C10=VALUE_B10=0;VALUE_C13=VALUE_B13=0;VALUE_C16=VALUE_B16=0;VALUE_C19=VALUE_B19=0;VALUE_C22=VALUE_B22=0;VALUE_C25=VALUE_B25=0;VALUE_C28=VALUE_B28=0;VALUE_C31=VALUE_B31=0;VALUE_C34=VALUE_B34=0;VALUE_C37=VALUE_B37=0;VALUE_C40=VALUE_B40=0;VALUE_C43=VALUE_B43=0;VALUE_C46=VALUE_B46=0;VALUE_C49=VALUE_B49=0;VALUE_C52=VALUE_B52=0;VALUE_C55=VALUE_B55=0;VALUE_C58=VALUE_B58=0;VALUE_C61=VALUE_B61=0;VALUE_C64=VALUE_B64=0;VALUE_C67=VALUE_B67=0;VALUE_C70=VALUE_B70=0;
			VALUE_B1=0; VALUE_B4=0; VALUE_B7=0; VALUE_B10=0; VALUE_B13=0; VALUE_B16=0; VALUE_B19=0; VALUE_B22=0; VALUE_B25=0; VALUE_B28=0; VALUE_B31=0; VALUE_B34=0; VALUE_B37=0; VALUE_B40=0; VALUE_B43=0; VALUE_B46=0; VALUE_B49=0; VALUE_B52=0; VALUE_B55=0; VALUE_B58=0; VALUE_B61=0; VALUE_B64=0; VALUE_B67=0; VALUE_B70=0;

			VALUE_B1 |= (int32_t)(ptr[42] & 1) << 2; //лента #14 bit #0 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 2 бит
			VALUE_B1 |= (int32_t)(ptr[45] & 1) << 3; //лента #15 bit #0 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 3 бит
			VALUE_B1 |= (int32_t)(ptr[48] & 1) << 4; //лента #16 bit #0 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 4 бит
			VALUE_B1 |= (int32_t)(ptr[51] & 1) << 5; //лента #17 bit #0 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 5 бит
			VALUE_B1 |= (int32_t)(ptr[54] & 1) << 6; //лента #18 bit #0 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 6 бит
			VALUE_B1 |= (int32_t)(ptr[57] & 1) << 7; //лента #19 bit #0 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 7 бит
			VALUE_B4 |= (int32_t)(ptr[42] & 2) << 1; //лента #14 bit #1 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 1 бит
			VALUE_B4 |= (int32_t)(ptr[45] & 2) << 2; //лента #15 bit #1 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 2 бит
			VALUE_B4 |= (int32_t)(ptr[48] & 2) << 3; //лента #16 bit #1 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 3 бит
			VALUE_B4 |= (int32_t)(ptr[51] & 2) << 4; //лента #17 bit #1 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 4 бит
			VALUE_B4 |= (int32_t)(ptr[54] & 2) << 5; //лента #18 bit #1 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 5 бит
			VALUE_B4 |= (int32_t)(ptr[57] & 2) << 6; //лента #19 bit #1 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 6 бит
			VALUE_B7 |= (int32_t)(ptr[42] & 4); //лента #14 bit #2 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 0 бит
			VALUE_B7 |= (int32_t)(ptr[45] & 4) << 1; //лента #15 bit #2 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 1 бит
			VALUE_B7 |= (int32_t)(ptr[48] & 4) << 2; //лента #16 bit #2 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 2 бит
			VALUE_B7 |= (int32_t)(ptr[51] & 4) << 3; //лента #17 bit #2 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 3 бит
			VALUE_B7 |= (int32_t)(ptr[54] & 4) << 4; //лента #18 bit #2 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 4 бит
			VALUE_B7 |= (int32_t)(ptr[57] & 4) << 5; //лента #19 bit #2 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 5 бит
			VALUE_B10 |= (int32_t)(ptr[42] & 8) >> 1; //лента #14 bit #3 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на -1 бит
			VALUE_B10 |= (int32_t)(ptr[45] & 8); //лента #15 bit #3 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 0 бит
			VALUE_B10 |= (int32_t)(ptr[48] & 8) << 1; //лента #16 bit #3 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 1 бит
			VALUE_B10 |= (int32_t)(ptr[51] & 8) << 2; //лента #17 bit #3 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 2 бит
			VALUE_B10 |= (int32_t)(ptr[54] & 8) << 3; //лента #18 bit #3 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 3 бит
			VALUE_B10 |= (int32_t)(ptr[57] & 8) << 4; //лента #19 bit #3 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 4 бит
			VALUE_B13 |= (int32_t)(ptr[42] & 16) >> 2; //лента #14 bit #4 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -2 бит
			VALUE_B13 |= (int32_t)(ptr[45] & 16) >> 1; //лента #15 bit #4 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -1 бит
			VALUE_B13 |= (int32_t)(ptr[48] & 16); //лента #16 bit #4 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 0 бит
			VALUE_B13 |= (int32_t)(ptr[51] & 16) << 1; //лента #17 bit #4 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 1 бит
			VALUE_B13 |= (int32_t)(ptr[54] & 16) << 2; //лента #18 bit #4 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 2 бит
			VALUE_B13 |= (int32_t)(ptr[57] & 16) << 3; //лента #19 bit #4 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 3 бит
			VALUE_B16 |= (int32_t)(ptr[42] & 32) >> 3; //лента #14 bit #5 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -3 бит
			VALUE_B16 |= (int32_t)(ptr[45] & 32) >> 2; //лента #15 bit #5 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -2 бит
			VALUE_B16 |= (int32_t)(ptr[48] & 32) >> 1; //лента #16 bit #5 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -1 бит
			VALUE_B16 |= (int32_t)(ptr[51] & 32); //лента #17 bit #5 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 0 бит
			VALUE_B16 |= (int32_t)(ptr[54] & 32) << 1; //лента #18 bit #5 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 1 бит
			VALUE_B16 |= (int32_t)(ptr[57] & 32) << 2; //лента #19 bit #5 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 2 бит
			VALUE_B19 |= (int32_t)(ptr[42] & 64) >> 4; //лента #14 bit #6 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -4 бит
			VALUE_B19 |= (int32_t)(ptr[45] & 64) >> 3; //лента #15 bit #6 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -3 бит
			VALUE_B19 |= (int32_t)(ptr[48] & 64) >> 2; //лента #16 bit #6 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -2 бит
			VALUE_B19 |= (int32_t)(ptr[51] & 64) >> 1; //лента #17 bit #6 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -1 бит
			VALUE_B19 |= (int32_t)(ptr[54] & 64); //лента #18 bit #6 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 0 бит
			VALUE_B19 |= (int32_t)(ptr[57] & 64) << 1; //лента #19 bit #6 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 1 бит
			VALUE_B22 |= (int32_t)(ptr[42] & 128) >> 5; //лента #14 bit #7 ch #0, надо заполнить 2 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -5 бит
			VALUE_B22 |= (int32_t)(ptr[45] & 128) >> 4; //лента #15 bit #7 ch #0, надо заполнить 3 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -4 бит
			VALUE_B22 |= (int32_t)(ptr[48] & 128) >> 3; //лента #16 bit #7 ch #0, надо заполнить 4 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -3 бит
			VALUE_B22 |= (int32_t)(ptr[51] & 128) >> 2; //лента #17 bit #7 ch #0, надо заполнить 5 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -2 бит
			VALUE_B22 |= (int32_t)(ptr[54] & 128) >> 1; //лента #18 bit #7 ch #0, надо заполнить 6 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -1 бит
			VALUE_B22 |= (int32_t)(ptr[57] & 128); //лента #19 bit #7 ch #0, надо заполнить 7 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 0 бит
			VALUE_B25 |= (int32_t)(ptr[43] & 1) << 2; //лента #14 bit #0 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 2 бит
			VALUE_B25 |= (int32_t)(ptr[46] & 1) << 3; //лента #15 bit #0 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 3 бит
			VALUE_B25 |= (int32_t)(ptr[49] & 1) << 4; //лента #16 bit #0 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 4 бит
			VALUE_B25 |= (int32_t)(ptr[52] & 1) << 5; //лента #17 bit #0 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 5 бит
			VALUE_B25 |= (int32_t)(ptr[55] & 1) << 6; //лента #18 bit #0 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 6 бит
			VALUE_B25 |= (int32_t)(ptr[58] & 1) << 7; //лента #19 bit #0 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 7 бит
			VALUE_B28 |= (int32_t)(ptr[43] & 2) << 1; //лента #14 bit #1 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 1 бит
			VALUE_B28 |= (int32_t)(ptr[46] & 2) << 2; //лента #15 bit #1 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 2 бит
			VALUE_B28 |= (int32_t)(ptr[49] & 2) << 3; //лента #16 bit #1 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 3 бит
			VALUE_B28 |= (int32_t)(ptr[52] & 2) << 4; //лента #17 bit #1 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 4 бит
			VALUE_B28 |= (int32_t)(ptr[55] & 2) << 5; //лента #18 bit #1 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 5 бит
			VALUE_B28 |= (int32_t)(ptr[58] & 2) << 6; //лента #19 bit #1 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 6 бит
			VALUE_B31 |= (int32_t)(ptr[43] & 4); //лента #14 bit #2 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 0 бит
			VALUE_B31 |= (int32_t)(ptr[46] & 4) << 1; //лента #15 bit #2 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 1 бит
			VALUE_B31 |= (int32_t)(ptr[49] & 4) << 2; //лента #16 bit #2 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 2 бит
			VALUE_B31 |= (int32_t)(ptr[52] & 4) << 3; //лента #17 bit #2 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 3 бит
			VALUE_B31 |= (int32_t)(ptr[55] & 4) << 4; //лента #18 bit #2 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 4 бит
			VALUE_B31 |= (int32_t)(ptr[58] & 4) << 5; //лента #19 bit #2 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 5 бит
			VALUE_B34 |= (int32_t)(ptr[43] & 8) >> 1; //лента #14 bit #3 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на -1 бит
			VALUE_B34 |= (int32_t)(ptr[46] & 8); //лента #15 bit #3 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 0 бит
			VALUE_B34 |= (int32_t)(ptr[49] & 8) << 1; //лента #16 bit #3 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 1 бит
			VALUE_B34 |= (int32_t)(ptr[52] & 8) << 2; //лента #17 bit #3 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 2 бит
			VALUE_B34 |= (int32_t)(ptr[55] & 8) << 3; //лента #18 bit #3 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 3 бит
			VALUE_B34 |= (int32_t)(ptr[58] & 8) << 4; //лента #19 bit #3 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 4 бит
			VALUE_B37 |= (int32_t)(ptr[43] & 16) >> 2; //лента #14 bit #4 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -2 бит
			VALUE_B37 |= (int32_t)(ptr[46] & 16) >> 1; //лента #15 bit #4 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -1 бит
			VALUE_B37 |= (int32_t)(ptr[49] & 16); //лента #16 bit #4 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 0 бит
			VALUE_B37 |= (int32_t)(ptr[52] & 16) << 1; //лента #17 bit #4 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 1 бит
			VALUE_B37 |= (int32_t)(ptr[55] & 16) << 2; //лента #18 bit #4 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 2 бит
			VALUE_B37 |= (int32_t)(ptr[58] & 16) << 3; //лента #19 bit #4 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 3 бит
			VALUE_B40 |= (int32_t)(ptr[43] & 32) >> 3; //лента #14 bit #5 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -3 бит
			VALUE_B40 |= (int32_t)(ptr[46] & 32) >> 2; //лента #15 bit #5 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -2 бит
			VALUE_B40 |= (int32_t)(ptr[49] & 32) >> 1; //лента #16 bit #5 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -1 бит
			VALUE_B40 |= (int32_t)(ptr[52] & 32); //лента #17 bit #5 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 0 бит
			VALUE_B40 |= (int32_t)(ptr[55] & 32) << 1; //лента #18 bit #5 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 1 бит
			VALUE_B40 |= (int32_t)(ptr[58] & 32) << 2; //лента #19 bit #5 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 2 бит
			VALUE_B43 |= (int32_t)(ptr[43] & 64) >> 4; //лента #14 bit #6 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -4 бит
			VALUE_B43 |= (int32_t)(ptr[46] & 64) >> 3; //лента #15 bit #6 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -3 бит
			VALUE_B43 |= (int32_t)(ptr[49] & 64) >> 2; //лента #16 bit #6 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -2 бит
			VALUE_B43 |= (int32_t)(ptr[52] & 64) >> 1; //лента #17 bit #6 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -1 бит
			VALUE_B43 |= (int32_t)(ptr[55] & 64); //лента #18 bit #6 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 0 бит
			VALUE_B43 |= (int32_t)(ptr[58] & 64) << 1; //лента #19 bit #6 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 1 бит
			VALUE_B46 |= (int32_t)(ptr[43] & 128) >> 5; //лента #14 bit #7 ch #1, надо заполнить 2 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -5 бит
			VALUE_B46 |= (int32_t)(ptr[46] & 128) >> 4; //лента #15 bit #7 ch #1, надо заполнить 3 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -4 бит
			VALUE_B46 |= (int32_t)(ptr[49] & 128) >> 3; //лента #16 bit #7 ch #1, надо заполнить 4 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -3 бит
			VALUE_B46 |= (int32_t)(ptr[52] & 128) >> 2; //лента #17 bit #7 ch #1, надо заполнить 5 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -2 бит
			VALUE_B46 |= (int32_t)(ptr[55] & 128) >> 1; //лента #18 bit #7 ch #1, надо заполнить 6 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -1 бит
			VALUE_B46 |= (int32_t)(ptr[58] & 128); //лента #19 bit #7 ch #1, надо заполнить 7 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 0 бит
			VALUE_B49 |= (int32_t)(ptr[44] & 1) << 2; //лента #14 bit #0 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 2 бит
			VALUE_B49 |= (int32_t)(ptr[47] & 1) << 3; //лента #15 bit #0 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 3 бит
			VALUE_B49 |= (int32_t)(ptr[50] & 1) << 4; //лента #16 bit #0 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 4 бит
			VALUE_B49 |= (int32_t)(ptr[53] & 1) << 5; //лента #17 bit #0 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 5 бит
			VALUE_B49 |= (int32_t)(ptr[56] & 1) << 6; //лента #18 bit #0 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 6 бит
			VALUE_B49 |= (int32_t)(ptr[59] & 1) << 7; //лента #19 bit #0 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 0, поэтому сдвигаемся на 7 бит
			VALUE_B52 |= (int32_t)(ptr[44] & 2) << 1; //лента #14 bit #1 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 1 бит
			VALUE_B52 |= (int32_t)(ptr[47] & 2) << 2; //лента #15 bit #1 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 2 бит
			VALUE_B52 |= (int32_t)(ptr[50] & 2) << 3; //лента #16 bit #1 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 3 бит
			VALUE_B52 |= (int32_t)(ptr[53] & 2) << 4; //лента #17 bit #1 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 4 бит
			VALUE_B52 |= (int32_t)(ptr[56] & 2) << 5; //лента #18 bit #1 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 5 бит
			VALUE_B52 |= (int32_t)(ptr[59] & 2) << 6; //лента #19 bit #1 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 1, поэтому сдвигаемся на 6 бит
			VALUE_B55 |= (int32_t)(ptr[44] & 4); //лента #14 bit #2 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 0 бит
			VALUE_B55 |= (int32_t)(ptr[47] & 4) << 1; //лента #15 bit #2 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 1 бит
			VALUE_B55 |= (int32_t)(ptr[50] & 4) << 2; //лента #16 bit #2 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 2 бит
			VALUE_B55 |= (int32_t)(ptr[53] & 4) << 3; //лента #17 bit #2 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 3 бит
			VALUE_B55 |= (int32_t)(ptr[56] & 4) << 4; //лента #18 bit #2 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 4 бит
			VALUE_B55 |= (int32_t)(ptr[59] & 4) << 5; //лента #19 bit #2 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 2, поэтому сдвигаемся на 5 бит
			VALUE_B58 |= (int32_t)(ptr[44] & 8) >> 1; //лента #14 bit #3 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на -1 бит
			VALUE_B58 |= (int32_t)(ptr[47] & 8); //лента #15 bit #3 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 0 бит
			VALUE_B58 |= (int32_t)(ptr[50] & 8) << 1; //лента #16 bit #3 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 1 бит
			VALUE_B58 |= (int32_t)(ptr[53] & 8) << 2; //лента #17 bit #3 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 2 бит
			VALUE_B58 |= (int32_t)(ptr[56] & 8) << 3; //лента #18 bit #3 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 3 бит
			VALUE_B58 |= (int32_t)(ptr[59] & 8) << 4; //лента #19 bit #3 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 3, поэтому сдвигаемся на 4 бит
			VALUE_B61 |= (int32_t)(ptr[44] & 16) >> 2; //лента #14 bit #4 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -2 бит
			VALUE_B61 |= (int32_t)(ptr[47] & 16) >> 1; //лента #15 bit #4 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на -1 бит
			VALUE_B61 |= (int32_t)(ptr[50] & 16); //лента #16 bit #4 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 0 бит
			VALUE_B61 |= (int32_t)(ptr[53] & 16) << 1; //лента #17 bit #4 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 1 бит
			VALUE_B61 |= (int32_t)(ptr[56] & 16) << 2; //лента #18 bit #4 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 2 бит
			VALUE_B61 |= (int32_t)(ptr[59] & 16) << 3; //лента #19 bit #4 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 4, поэтому сдвигаемся на 3 бит
			VALUE_B64 |= (int32_t)(ptr[44] & 32) >> 3; //лента #14 bit #5 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -3 бит
			VALUE_B64 |= (int32_t)(ptr[47] & 32) >> 2; //лента #15 bit #5 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -2 бит
			VALUE_B64 |= (int32_t)(ptr[50] & 32) >> 1; //лента #16 bit #5 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на -1 бит
			VALUE_B64 |= (int32_t)(ptr[53] & 32); //лента #17 bit #5 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 0 бит
			VALUE_B64 |= (int32_t)(ptr[56] & 32) << 1; //лента #18 bit #5 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 1 бит
			VALUE_B64 |= (int32_t)(ptr[59] & 32) << 2; //лента #19 bit #5 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 5, поэтому сдвигаемся на 2 бит
			VALUE_B67 |= (int32_t)(ptr[44] & 64) >> 4; //лента #14 bit #6 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -4 бит
			VALUE_B67 |= (int32_t)(ptr[47] & 64) >> 3; //лента #15 bit #6 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -3 бит
			VALUE_B67 |= (int32_t)(ptr[50] & 64) >> 2; //лента #16 bit #6 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -2 бит
			VALUE_B67 |= (int32_t)(ptr[53] & 64) >> 1; //лента #17 bit #6 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на -1 бит
			VALUE_B67 |= (int32_t)(ptr[56] & 64); //лента #18 bit #6 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 0 бит
			VALUE_B67 |= (int32_t)(ptr[59] & 64) << 1; //лента #19 bit #6 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 6, поэтому сдвигаемся на 1 бит
			VALUE_B70 |= (int32_t)(ptr[44] & 128) >> 5; //лента #14 bit #7 ch #2, надо заполнить 2 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -5 бит
			VALUE_B70 |= (int32_t)(ptr[47] & 128) >> 4; //лента #15 bit #7 ch #2, надо заполнить 3 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -4 бит
			VALUE_B70 |= (int32_t)(ptr[50] & 128) >> 3; //лента #16 bit #7 ch #2, надо заполнить 4 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -3 бит
			VALUE_B70 |= (int32_t)(ptr[53] & 128) >> 2; //лента #17 bit #7 ch #2, надо заполнить 5 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -2 бит
			VALUE_B70 |= (int32_t)(ptr[56] & 128) >> 1; //лента #18 bit #7 ch #2, надо заполнить 6 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на -1 бит
			VALUE_B70 |= (int32_t)(ptr[59] & 128); //лента #19 bit #7 ch #2, надо заполнить 7 бит маски, но инфа о нем хранится в 7, поэтому сдвигаемся на 0 бит

#ifdef INVERTORS
			VALUE_B1=~VALUE_B1; VALUE_B4=~VALUE_B4; VALUE_B7=~VALUE_B7; VALUE_B10=~VALUE_B10; VALUE_B13=~VALUE_B13; VALUE_B16=~VALUE_B16; VALUE_B19=~VALUE_B19; VALUE_B22=~VALUE_B22; VALUE_B25=~VALUE_B25; VALUE_B28=~VALUE_B28; VALUE_B31=~VALUE_B31; VALUE_B34=~VALUE_B34; VALUE_B37=~VALUE_B37; VALUE_B40=~VALUE_B40; VALUE_B43=~VALUE_B43; VALUE_B46=~VALUE_B46; VALUE_B49=~VALUE_B49; VALUE_B52=~VALUE_B52; VALUE_B55=~VALUE_B55; VALUE_B58=~VALUE_B58; VALUE_B61=~VALUE_B61; VALUE_B64=~VALUE_B64; VALUE_B67=~VALUE_B67; VALUE_B70=~VALUE_B70;
#endif

			__disable_irq();
			GPIOB->ODR = VALUE_B0; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B1; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B2; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B3; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B4; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B5; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B6; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B7; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B8; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B9; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B10; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B11; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B12; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B13; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B14; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B15; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B16; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B17; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B18; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B19; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B20; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B21; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B22; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B23; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B24; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B25; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B26; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B27; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B28; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B29; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B30; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B31; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B32; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B33; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B34; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B35; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B36; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B37; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B38; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B39; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B40; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B41; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B42; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B43; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B44; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B45; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B46; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B47; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B48; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B49; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B50; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B51; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B52; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B53; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B54; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B55; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B56; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B57; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B58; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B59; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B60; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B61; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B62; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B63; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B64; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B65; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B66; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B67; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B68; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B69; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B70; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			GPIOB->ODR = VALUE_B71; asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
			__enable_irq();

			ptr+=20 * 3; //20 лент по 3 байта на ленту
		}
	for (int i = 0; i < 1000;i++)
		asm("nop");


}
static void LED_ResetBuffer(void)
{
	ledDataPtr = &ledData[0];
}



#endif /* SRC_VBDLEDDATA_H_ */